pool:
  name: Hosted VS2017
  demands:
  - msbuild
  - visualstudio
  - vstest

steps:
- checkout: self 
  submodules: true

- task: NuGetToolInstaller@1
  displayName: 'Use NuGet 4.7.3'
  inputs:
    versionSpec: 4.7.3

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: KeraLua.sln

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: KeraLua.Core.sln

- powershell: 'Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(''https://chocolatey.org/install.ps1''))'
  displayName: 'Install Choco'

- script: 'choco install gitversion.portable --pre '
  displayName: 'Install GitVersion'

- task: PowerShell@2
  displayName: 'PreBuild Script'
  inputs:
    targetType: filePath
    filePath: ./devops/PreBuild.ps1
    arguments: 'KeraLua KeraLua.nuspec'

- task: MSBuild@1
  displayName: 'Build solution KeraLua.sln'
  inputs:
    solution: KeraLua.sln
    configuration: Release

- task: MSBuild@1
  displayName: 'Build .NET Core'
  inputs:
    solution: KeraLua.Core.sln
    configuration: Release
    msbuildArguments: /restore

- task: DotNetCoreCLI@2
  displayName: 'dotnet vstest'
  inputs:
    command: custom
    custom: vstest
    arguments: '.\tests\build\netcore\bin\Release\netcoreapp3.0\KeraLuaTest.Core.dll'

- task: MSBuild@1
  displayName: 'Build Android'
  inputs:
    solution: KeraLua.Android.sln
    configuration: Release
    msbuildArguments: '/p:AndroidNdkDirectory=%ANDROID_NDK_HOME%'

- task: VSTest@2
  displayName: 'VsTest - testAssemblies'
  inputs:
    testAssemblyVer2: '.\tests\build\net45\bin\Release\KeraLuaTest.dll'

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Xamarin.iOS'
  inputs:
    buildType: 'specific'
    project: 'NuGets'
    definition: 'NLua.KeraLua.Mac'
    specificBuildWithTriggering: true
    artifactName: Xamarin.iOS.KeraLua.dll

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Xamarin.Mac'
  inputs:
    buildType: 'specific'
    project: 'NuGets'
    definition: 'NLua.KeraLua.Mac'
    specificBuildWithTriggering: true
    artifactName: Xamarin.Mac.KeraLua.dll

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Xamarin.watchOS'
  inputs:
    buildType: 'specific'
    project: 'NuGets'
    definition: 'NLua.KeraLua.Mac'
    specificBuildWithTriggering: true
    artifactName: Xamarin.watchOS.KeraLua.dll

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build Xamarin.tvOS'
  inputs:
    buildType: 'specific'
    project: 'NuGets'
    definition: 'NLua.KeraLua.Mac'
    specificBuildWithTriggering: true
    artifactName: Xamarin.tvOS.KeraLua.dll

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build liblua53.dylib'
  inputs:
    buildType: 'specific'
    project: 'NuGets'
    definition: 'NLua.KeraLua.Mac'
    specificBuildWithTriggering: true
    artifactName: liblua53.dylib

- task: DownloadBuildArtifacts@0
  displayName: 'Download Build liblua53.so (Linux)'
  inputs:
    buildType: 'specific'
    project: 'NuGets'
    definition: 'NLua.KeraLua.Linux'
    specificBuildWithTriggering: true
    artifactName: liblua53.so

- task: CopyFiles@2
  displayName: 'Copy Files to: lib/Release/xamarinios/'
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)\Xamarin.iOS.KeraLua.dll\'
    TargetFolder: lib/Release/xamarinios/

- task: CopyFiles@2
  displayName: 'Copy Files to: lib/Release/xamarinmac/'
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)\Xamarin.Mac.KeraLua.dll\'
    TargetFolder: lib/Release/xamarinmac/

- task: CopyFiles@2
  displayName: 'Copy Files to: lib/Release/xamarintvos/ '
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)\Xamarin.tvOS.KeraLua.dll\'
    TargetFolder: lib/Release/xamarintvos/

- task: CopyFiles@2
  displayName: 'Copy Files to: lib/Release/xamarinwatchos/'
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)\Xamarin.watchOS.KeraLua.dll\'
    TargetFolder: lib/Release/xamarinwatchos/

- task: CopyFiles@2
  displayName: 'Copy Files to: runtimes/osx/native/'
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)\liblua53.dylib\'
    TargetFolder: runtimes/osx/native/

- task: CopyFiles@2
  displayName: 'Copy Files to: runtimes/linux-x64/native/'
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)\liblua53.so\'
    TargetFolder: 'runtimes/linux-x64/native/'

- script: 'nuget setapikey $(apikey)'
  displayName: 'Set NuGet API Key'

- task: PowerShell@2
  displayName: 'Package NuGet'
  inputs:
    targetType: filePath
    filePath: ./devops/Package.ps1
    arguments: 'KeraLua KeraLua.nuspec'

- script: 'rename *.nupkg KeraLua.nupkg'
  displayName: 'Rename Nuget Package'

- task: PublishBuildArtifacts@1
  displayName: 'Save KeraLua.nupkg Artifact'
  inputs:
    PathtoPublish: KeraLua.nupkg
    ArtifactName: KeraLua.nupkg

- task: PowerShell@2
  displayName: 'Publish NuGet'
  inputs:
    targetType: filePath
    filePath: ./devops/Publish.ps1
    arguments: KeraLua

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'SucceededWithIssues')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    message: |
            ⚠️ <b>Warning!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'Failed')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    buildQueuedBy: false
    message: |
            ❌ <b>Fail!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'Succeeded')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    buildQueuedBy: false
    message: |
            ✅ <b>Success!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

# 