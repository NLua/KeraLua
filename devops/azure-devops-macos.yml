pool:
  name: Hosted macOS
  demands: msbuild


steps:
- checkout: self 
  submodules: true

# Azure DevOps hosted pool is still using an old version of Xamarin.iOS, 
# so we will use the previous major version of Xcode
- task: CmdLine@2
  displayName: 'Provisioning Xamarin.iOS'
  inputs:
    script: 'cd ~;
            curl -O https://download.visualstudio.microsoft.com/download/pr/87a0582e-09b0-499a-852a-6d963e614afb/b101ede139bd8ad0a5d4c2f0077c3ca4/xamarin.ios-12.14.0.110.pkg;
            sudo installer -pkg ~/xamarin.ios-12.14.0.110.pkg -target /'

# Print the current version of Xamarin.iOS
- task: CmdLine@2
  displayName: 'Show Xamarin.iOS Version'
  inputs:
    script: '/Library/Frameworks/Xamarin.iOS.framework/Versions/Current/bin/mtouch --version'

- task: NuGetCommand@2
  displayName: 'NuGet restore KeraLua.Mac.sln'
  inputs:
    restoreSolution: KeraLua.Mac.sln

- task: NuGetCommand@2
  displayName: 'NuGet restore KeraLua.sln'
  inputs:
    restoreSolution: KeraLua.sln

- script: 'brew update'
  displayName: 'Brew Update'

- script: 'brew install gitversion --ignore-dependencies'
  displayName: 'Install GitVersion'

- task: PowerShell@2
  displayName: 'PowerShell Script'
  inputs:
    targetType: filePath
    filePath: ./devops/PreBuild.ps1
    arguments: 'KeraLua KeraLua.nuspec'

- task: MSBuild@1
  displayName: 'Build solution KeraLua.sln'
  inputs:
    solution: KeraLua.sln
    configuration: Release

- task: MSBuild@1
  displayName: 'Build solution KeraLua.Mac.sln'
  inputs:
    solution: KeraLua.Mac.sln
    configuration: Release

- script: 'mono packages/NUnit.ConsoleRunner.3.10.0/tools/nunit3-console.exe ./tests/build/net45/bin/Release/KeraLuaTest.dll'
  displayName: 'Run OSX tests'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Xamarin.iOS.KeraLua.dll'
  inputs:
    PathtoPublish: lib/Release/xamarinios/KeraLua.dll
    ArtifactName: Xamarin.iOS.KeraLua.dll

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Xamarin.tvOS.KeraLua.dll'
  inputs:
    PathtoPublish: lib/Release/xamarintvos/KeraLua.dll
    ArtifactName: Xamarin.tvOS.KeraLua.dll

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Xamarin.watchOS.KeraLua.dll'
  inputs:
    PathtoPublish: lib/Release/xamarinwatchos/KeraLua.dll
    ArtifactName: Xamarin.watchOS.KeraLua.dll

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Xamarin.Mac.KeraLua.dll'
  inputs:
    PathtoPublish: lib/Release/xamarinmac/KeraLua.dll
    ArtifactName: Xamarin.Mac.KeraLua.dll

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: liblua54.dylib'
  inputs:
    PathtoPublish: runtimes/osx/native/liblua54.dylib
    ArtifactName: liblua54.dylib

- task: TriggerBuild@3
  displayName: 'Trigger a new build of KeraLua.Linux'
  inputs:
    buildDefinition: 'NLua.KeraLua.Linux'
    ignoreSslCertificateErrors: true
    useSameSourceVersion: true
    password: '$(myToken)'

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'SucceededWithIssues')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    message: |
            ⚠️ <b>Warning!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'Failed')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    buildQueuedBy: false
    message: |
            ❌ <b>Fail!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

- task: SendTelegramNotification@0
  condition: in(variables['Agent.JobStatus'], 'Succeeded')
  inputs:
    botToken: '$(botToken)'
    chats: '$(chatId)'
    taskStatus: false
    buildQueuedBy: false
    message: |
            ✅ <b>Success!</b>  <a href="$(Build.Repository.Uri)">$(Build.DefinitionName)</a> (<code>$(Build.SourceBranchName)</code>)
            <pre>$(Build.SourceVersion)</pre>
            $(Build.SourceVersionMessage) by $(Build.QueuedBy)

# 